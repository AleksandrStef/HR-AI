"""
Main entry point for HR AI application.
"""

import sys
import os
import argparse
import asyncio
import logging
from pathlib import Path

# Add src to Python path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from hr_ai.api.web_app import main as run_web_app
from hr_ai.analyzers.hr_analyzer import HRAnalyzer
from hr_ai.schedulers.weekly_scheduler import WeeklyScheduler
from hr_ai.notifications.notifier import NotificationManager
from config.settings import settings

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('hr_ai.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def run_analysis():
    """Run document analysis manually."""
    print("üîÑ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    
    analyzer = HRAnalyzer()
    try:
        results = analyzer.analyze_all_documents()
        
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {results['processed']}")
        print(f"üë• –í—Å—Ç—Ä–µ—á –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {results['meetings_detected']}")
        print(f"‚ùå –í—Å—Ç—Ä–µ—á –ø—Ä–æ–ø—É—â–µ–Ω–æ: {results['meetings_missed']}")
        print(f"‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è HR: {len(results['hr_attention_required'])}")
        
        if results['hr_attention_required']:
            print("\nüö® –°–ª—É—á–∞–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è HR:")
            for case in results['hr_attention_required']:
                print(f"  ‚Ä¢ {case['employee']}: {case['reason']}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
    finally:
        analyzer.close()

def run_scheduler():
    """Run the scheduler in standalone mode."""
    print("‚è∞ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
    
    scheduler = WeeklyScheduler()
    try:
        # Run manual analysis first
        results = scheduler.run_manual_analysis()
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞: {results}")
        
        # Start scheduler
        scheduler.start()
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        
        # Keep running
        try:
            asyncio.get_event_loop().run_forever()
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {str(e)}")
    finally:
        scheduler.stop()
        scheduler.close()

def test_notifications():
    """Test notification systems."""
    print("üì® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    notifier = NotificationManager()
    
    # Test connections
    results = notifier.test_connections()
    print(f"üîó –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:")
    print(f"  Teams: {'‚úÖ' if results.get('teams') else '‚ùå'}")
    print(f"  Email: {'‚úÖ' if results.get('email') else '‚ùå'}")
    
    # Send test notification
    if any(results.values()):
        try:
            loop = asyncio.get_event_loop()
            success = loop.run_until_complete(
                notifier.send_instant_alert(
                    employee_name="–¢–µ—Å—Ç–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫",
                    alert_type="system_test",
                    message="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç HR AI —Å–∏—Å—Ç–µ–º—ã",
                    priority="medium"
                )
            )
            print(f"üì§ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {'‚úÖ' if success else '‚ùå'}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
    else:
        print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

def setup_environment():
    """Setup environment and check configuration."""
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    # Check if .env file exists
    if not Path(".env").exists():
        print("‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –∏–∑ –ø—Ä–∏–º–µ—Ä–∞...")
        try:
            import shutil
            shutil.copy(".env.example", ".env")
            print("‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .env: {str(e)}")
            return False
    
    # Check docs directory
    docs_path = Path(settings.docs_directory)
    if not docs_path.exists():
        print(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {docs_path}")
        try:
            docs_path.mkdir(parents=True, exist_ok=True)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {docs_path}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: {str(e)}")
            return False
    
    # Check for documents
    doc_files = list(docs_path.glob("*.docx")) + list(docs_path.glob("*.doc"))
    print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(doc_files)}")
    
    # Check AI configuration
    if settings.openai_api_key:
        print("ü§ñ OpenAI API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω ‚úÖ")
    else:
        print("‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")
    
    # Check notification configuration
    notifications_configured = any([
        settings.enable_teams_notifications and settings.teams_webhook_url,
        settings.enable_email_notifications and settings.smtp_server
    ])
    
    if notifications_configured:
        print("üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã ‚úÖ")
    else:
        print("‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")
    return True

def main():
    """Main entry point."""
    parser = argparse.ArgumentParser(description="HR AI - –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–∞–Ω–æ–≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è")
    parser.add_argument("command", choices=["web", "analyze", "schedule", "test-notifications", "setup"], 
                       help="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    parser.add_argument("--port", type=int, default=settings.port, help="–ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞")
    parser.add_argument("--host", default=settings.host, help="–•–æ—Å—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞")
    
    args = parser.parse_args()
    
    print("ü§ñ HR AI - –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–∞–Ω–æ–≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è")
    print("=" * 60)
    
    if args.command == "setup":
        setup_environment()
        return
    
    if not setup_environment():
        print("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py setup")
        return
    
    try:
        if args.command == "web":
            print(f"üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://{args.host}:{args.port}")
            # Update settings for command line args
            settings.host = args.host
            settings.port = args.port
            run_web_app()
            
        elif args.command == "analyze":
            run_analysis()
            
        elif args.command == "schedule":
            run_scheduler()
            
        elif args.command == "test-notifications":
            test_notifications()
            
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main()