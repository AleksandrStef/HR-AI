"""
Test runner for HR AI system - MVP validation.
"""

import sys
import os
from pathlib import Path

# Add src to Python path
sys.path.insert(0, str(Path(__file__).parent / "src"))

import asyncio
import logging
from datetime import datetime

from hr_ai.parsers.document_parser import DocumentParser
from hr_ai.analyzers.text_analyzer import TextAnalyzer
from hr_ai.analyzers.hr_analyzer import HRAnalyzer
from hr_ai.api.query_processor import QueryProcessor
from hr_ai.notifications.notifier import NotificationManager
from config.settings import settings

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MVPTester:
    """Test the MVP functionality with sample documents."""
    
    def __init__(self):
        self.results = {
            'tests_run': 0,
            'tests_passed': 0,
            'tests_failed': 0,
            'errors': []
        }
    
    def run_all_tests(self):
        """Run all MVP tests."""
        print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MVP HR AI —Å–∏—Å—Ç–µ–º—ã")
        print("=" * 50)
        
        # Test 1: Document parsing
        self.test_document_parsing()
        
        # Test 2: Text analysis
        self.test_text_analysis()
        
        # Test 3: Full analysis workflow
        self.test_full_analysis()
        
        # Test 4: Query processing
        self.test_query_processing()
        
        # Test 5: Notification system
        self.test_notifications()
        
        # Print summary
        self.print_summary()
    
    def test_document_parsing(self):
        """Test document parser with sample files."""
        print("\nüìÑ –¢–µ—Å—Ç 1: –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        try:
            parser = DocumentParser()
            files_info = parser.scan_directory()
            
            self.results['tests_run'] += 1
            
            if not files_info:
                print("‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ docs/")
                print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –ø–∞–ø–∫–µ docs/ –µ—Å—Ç—å .docx —Ñ–∞–π–ª—ã")
                self.results['tests_failed'] += 1
                return
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(files_info)}")
            
            # Test parsing first document
            first_file = files_info[0]['file_path']
            print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {Path(first_file).name}")
            
            document_data = parser.parse_document(first_file)
            
            # Validate parsing results
            required_fields = ['employee_name', 'full_text', 'sections', 'dates_found']
            for field in required_fields:
                if field not in document_data:
                    raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}")
            
            print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            print(f"   –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {document_data['employee_name']}")
            print(f"   –¢–µ–∫—Å—Ç: {len(document_data['full_text'])} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –°–µ–∫—Ü–∏–π: {len(document_data['sections'])}")
            print(f"   –î–∞—Ç –Ω–∞–π–¥–µ–Ω–æ: {len(document_data['dates_found'])}")
            
            self.results['tests_passed'] += 1
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
            self.results['tests_failed'] += 1
            self.results['errors'].append(f"Document parsing: {str(e)}")
    
    def test_text_analysis(self):
        """Test AI text analysis."""
        print("\nü§ñ –¢–µ—Å—Ç 2: AI –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞")
        
        try:
            parser = DocumentParser()
            analyzer = TextAnalyzer()
            
            self.results['tests_run'] += 1
            
            # Get first document
            files_info = parser.scan_directory()
            if not files_info:
                print("‚ö†Ô∏è –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                self.results['tests_failed'] += 1
                return
            
            document_data = parser.parse_document(files_info[0]['file_path'])
            
            # Test meeting analysis
            print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å—Ç—Ä–µ—á...")
            meeting_analysis = analyzer.analyze_meeting_occurrence(document_data)
            
            print(f"   –í—Å—Ç—Ä–µ—á–∞ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å: {meeting_analysis.meeting_occurred}")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {meeting_analysis.confidence_score:.2f}")
            print(f"   –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è HR: {meeting_analysis.requires_hr_attention}")
            
            # Test information extraction
            print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
            extracted_info = analyzer.extract_structured_information(document_data)
            
            categories = [
                'training_development', 'feedback_motivation', 'hr_processes',
                'community_engagement', 'location_relocation', 'risks_concerns'
            ]
            
            for category in categories:
                items = getattr(extracted_info, category, [])
                if items:
                    print(f"   {category}: {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            print("‚úÖ AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            self.results['tests_passed'] += 1
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
            self.results['tests_failed'] += 1
            self.results['errors'].append(f"Text analysis: {str(e)}")
    
    def test_full_analysis(self):
        """Test full analysis workflow."""
        print("\n‚öôÔ∏è –¢–µ—Å—Ç 3: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞")
        
        try:
            self.results['tests_run'] += 1
            
            analyzer = HRAnalyzer()
            
            print("üîÑ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
            results = analyzer.analyze_all_documents(force_reanalyze=True)
            
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
            print(f"   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {results['total_files']}")
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {results['processed']}")
            print(f"   –û—à–∏–±–æ–∫: {results['errors']}")
            print(f"   –í—Å—Ç—Ä–µ—á —Å–æ—Å—Ç–æ—è–ª–æ—Å—å: {results['meetings_detected']}")
            print(f"   –í—Å—Ç—Ä–µ—á –ø—Ä–æ–ø—É—â–µ–Ω–æ: {results['meetings_missed']}")
            print(f"   –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è HR: {len(results['hr_attention_required'])}")
            
            if results['hr_attention_required']:
                print("\n‚ö†Ô∏è –°–ª—É—á–∞–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è HR:")
                for case in results['hr_attention_required'][:3]:  # Show first 3
                    print(f"   ‚Ä¢ {case.get('employee', 'Unknown')}: {case.get('reason', 'Unknown')}")
            
            # Test summary generation
            summary = analyzer.get_analysis_summary(days=30)
            print(f"\nüìà –°–≤–æ–¥–∫–∞ –∑–∞ 30 –¥–Ω–µ–π:")
            print(f"   –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {summary['total_documents']}")
            print(f"   –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(summary['employees'])}")
            print(f"   –í—Å—Ç—Ä–µ—á –≤—Å–µ–≥–æ: {summary['meetings_total']}")
            
            analyzer.close()
            
            print("‚úÖ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            self.results['tests_passed'] += 1
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
            self.results['tests_failed'] += 1
            self.results['errors'].append(f"Full analysis: {str(e)}")
    
    def test_query_processing(self):
        """Test query processing functionality."""
        print("\nüí¨ –¢–µ—Å—Ç 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        try:
            self.results['tests_run'] += 1
            
            processor = QueryProcessor()
            
            # Test queries
            test_queries = [
                "–ö—Ç–æ —É–ø–æ–º–∏–Ω–∞–ª –æ–±—É—á–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞?",
                "–ö–∞–∫–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–∏—Å—å?",
                "–ï—Å—Ç—å –ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–µ–ª–æ–∫–∞—Ü–∏–∏?",
                "–ö—Ç–æ –ø—Ä–æ—è–≤–∏–ª –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏?"
            ]
            
            print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤...")
            
            for i, query in enumerate(test_queries[:2]):  # Test first 2 queries
                print(f"\n   –ó–∞–ø—Ä–æ—Å {i+1}: {query}")
                
                result = asyncio.run(processor.process_query(query))
                
                if result['success']:
                    print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {result['total_results']}")
                    print(f"   üí° {result['summary'][:100]}...")
                else:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞: {result.get('error', 'Unknown')}")
            
            processor.close()
            
            print("\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            self.results['tests_passed'] += 1
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤: {str(e)}")
            self.results['tests_failed'] += 1
            self.results['errors'].append(f"Query processing: {str(e)}")
    
    def test_notifications(self):
        """Test notification system."""
        print("\nüì® –¢–µ—Å—Ç 5: –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        try:
            self.results['tests_run'] += 1
            
            notifier = NotificationManager()
            
            print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
            
            # Test connections
            connection_results = notifier.test_connections()
            
            teams_status = "‚úÖ" if connection_results.get('teams') else "‚ùå"
            email_status = "‚úÖ" if connection_results.get('email') else "‚ùå"
            
            print(f"   Teams: {teams_status}")
            print(f"   Email: {email_status}")
            
            if not any(connection_results.values()):
                print("‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è MVP)")
                print("üí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø–æ–ª–Ω–∏—Ç–µ .env —Ñ–∞–π–ª")
            else:
                print("‚úÖ –•–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            self.results['tests_passed'] += 1
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}")
            self.results['tests_failed'] += 1
            self.results['errors'].append(f"Notifications: {str(e)}")
    
    def print_summary(self):
        """Print test summary."""
        print("\n" + "=" * 50)
        print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø MVP")
        print("=" * 50)
        
        print(f"üß™ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.results['tests_run']}")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {self.results['tests_passed']}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.results['tests_failed']}")
        
        success_rate = (self.results['tests_passed'] / self.results['tests_run']) * 100 if self.results['tests_run'] > 0 else 0
        print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        if self.results['errors']:
            print("\nüîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:")
            for error in self.results['errors']:
                print(f"   ‚Ä¢ {error}")
        
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        
        if self.results['tests_failed'] == 0:
            print("   üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! MVP –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
            print("   üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: python main.py web")
        else:
            print("   ‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.")
            print("   üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: python main.py setup")
        
        if not settings.openai_api_key:
            print("   ü§ñ –î–ª—è –ø–æ–ª–Ω–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–±–∞–≤—å—Ç–µ OpenAI API –∫–ª—é—á –≤ .env")
        
        print("\nüìö –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   python main.py web       # –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        print("   python main.py analyze   # –†—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑")
        print("   python main.py schedule  # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")

def main():
    """Run MVP tests."""
    tester = MVPTester()
    tester.run_all_tests()

if __name__ == "__main__":
    main()