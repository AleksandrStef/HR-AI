"""
FastAPI web application for HR AI system.
"""

from datetime import datetime
from typing import Dict, List, Optional, Any
import logging

from fastapi import FastAPI, HTTPException, Depends, BackgroundTasks
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
import uvicorn

from config.settings import settings
from .query_processor import QueryProcessor
from ..analyzers.hr_analyzer import HRAnalyzer
from ..schedulers.weekly_scheduler import WeeklyScheduler
from ..notifications.notifier import NotificationManager

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# FastAPI app
app = FastAPI(
    title="HR AI Development Plan Analyzer",
    description="AI-powered analysis of Individual Development Plans",
    version="1.0.0"
)

# Static files and templates
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

# Global instances
query_processor = QueryProcessor()
hr_analyzer = HRAnalyzer()
scheduler = WeeklyScheduler()
notifier = NotificationManager()

# Pydantic models for API
class QueryRequest(BaseModel):
    query: str
    filters: Optional[Dict[str, Any]] = None

class QueryResponse(BaseModel):
    success: bool
    total_results: int
    results: List[Dict[str, Any]]
    summary: str
    query_analysis: Dict[str, Any]
    timestamp: str

class AnalysisRequest(BaseModel):
    force_reanalyze: bool = False
    days_back: Optional[int] = None

class AnalysisResponse(BaseModel):
    success: bool
    message: str
    statistics: Dict[str, Any]
    hr_attention_required: List[Dict[str, Any]]

class NotificationTest(BaseModel):
    message: str
    priority: str = "medium"

# Routes

@app.get("/", response_class=HTMLResponse)
async def read_root():
    """Serve the main interface."""
    return """
    <!DOCTYPE html>
    <html>
    <head>
        <title>HR AI - Individual Development Plan Analyzer</title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
            .container { max-width: 1200px; margin: 0 auto; }
            .header { text-align: center; margin-bottom: 40px; }
            .section { margin-bottom: 30px; padding: 20px; border-radius: 8px; background-color: #f9f9f9; }
            .query-box { width: 100%; padding: 15px; font-size: 16px; border: 1px solid #ddd; border-radius: 4px; }
            .btn { padding: 12px 24px; background-color: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; margin: 5px; }
            .btn:hover { background-color: #0056b3; }
            .btn-secondary { background-color: #6c757d; }
            .btn-secondary:hover { background-color: #545b62; }
            .results { margin-top: 20px; }
            .result-item { padding: 15px; margin: 10px 0; border-left: 4px solid #007bff; background-color: white; }
            .employee-name { font-weight: bold; color: #007bff; }
            .result-type { color: #6c757d; font-size: 14px; }
            .result-content { margin: 10px 0; }
            .loading { display: none; text-align: center; padding: 20px; }
            .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; }
            .stat-card { background: white; padding: 20px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
            .stat-number { font-size: 2em; font-weight: bold; color: #007bff; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>ü§ñ HR AI - –ê–Ω–∞–ª–∏–∑ –ü–ò–†</h1>
                <p>–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–∞–Ω–æ–≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è</p>
            </div>
            
            <div class="section">
                <h2>üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–∏—Å—Ç–µ–º–µ</h2>
                <textarea id="queryInput" class="query-box" rows="3" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ö—Ç–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞ –≤—ã—Ä–∞–∑–∏–ª –∂–µ–ª–∞–Ω–∏–µ –≤—ã—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –≤–Ω–µ—à–Ω–µ–º —Ñ–æ—Ä—É–º–µ?'"></textarea>
                <br>
                <button class="btn" onclick="submitQuery()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å</button>
                <button class="btn btn-secondary" onclick="clearResults()">–û—á–∏—Å—Ç–∏—Ç—å</button>
                
                <div class="loading" id="loading">
                    <p>üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å...</p>
                </div>
                
                <div id="results" class="results"></div>
            </div>
            
            <div class="section">
                <h2>üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–æ–º</h2>
                <button class="btn" onclick="runAnalysis(false)">–ê–Ω–∞–ª–∏–∑ –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</button>
                <button class="btn" onclick="runAnalysis(true)">–ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∞–Ω–∞–ª–∏–∑</button>
                <button class="btn btn-secondary" onclick="getSystemStatus()">–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</button>
                <button class="btn btn-secondary" onclick="testNotifications()">–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</button>
                
                <div id="analysisResults"></div>
            </div>
            
            <div class="section">
                <h2>‚òÅÔ∏è Google Drive</h2>
                <button class="btn" onclick="getStorageStatus()">–°—Ç–∞—Ç—É—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞</button>
                <button class="btn" onclick="syncGoogleDrive(false)">–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è</button>
                <button class="btn" onclick="syncGoogleDrive(true)">–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è</button>
                <button class="btn btn-secondary" onclick="refreshStorageConnection()">–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</button>
                
                <div id="storageResults"></div>
            </div>
            
            <div class="section">
                <h2>üìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤</h2>
                <ul>
                    <li><a href="#" onclick="setQuery('–ö—Ç–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞ –≤—ã—Ä–∞–∑–∏–ª –∂–µ–ª–∞–Ω–∏–µ –≤—ã—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –≤–Ω–µ—à–Ω–µ–º —Ñ–æ—Ä—É–º–µ?')">–ö—Ç–æ —Ö–æ—á–µ—Ç –≤—ã—Å—Ç—É–ø–∞—Ç—å –Ω–∞ —Ñ–æ—Ä—É–º–∞—Ö?</a></li>
                    <li><a href="#" onclick="setQuery('–ö–∞–∫–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å–æ–æ–±—â–∏–ª–∏ –æ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–µ –∏–ª–∏ –≤—ã–≥–æ—Ä–∞–Ω–∏–∏?')">–ü—Ä–∏–∑–Ω–∞–∫–∏ –≤—ã–≥–æ—Ä–∞–Ω–∏—è</a></li>
                    <li><a href="#" onclick="setQuery('–ö—Ç–æ –ø—Ä–æ—à—ë–ª –æ–±—É—á–µ–Ω–∏–µ —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤?')">–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏</a></li>
                    <li><a href="#" onclick="setQuery('–ï—Å—Ç—å –ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–µ–ª–æ–∫–∞—Ü–∏–∏?')">–ü–ª–∞–Ω—ã —Ä–µ–ª–æ–∫–∞—Ü–∏–∏</a></li>
                    <li><a href="#" onclick="setQuery('–ö–∞–∫–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–∏—Å—å –Ω–∞ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ?')">–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏</a></li>
                </ul>
            </div>
        </div>
        
        <script>
            async function submitQuery() {
                const query = document.getElementById('queryInput').value.trim();
                if (!query) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å');
                    return;
                }
                
                const loading = document.getElementById('loading');
                const results = document.getElementById('results');
                
                loading.style.display = 'block';
                results.innerHTML = '';
                
                try {
                    const response = await fetch('/api/query', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ query: query })
                    });
                    
                    const data = await response.json();
                    displayResults(data);
                } catch (error) {
                    results.innerHTML = '<div class="result-item">–û—à–∏–±–∫–∞: ' + error.message + '</div>';
                } finally {
                    loading.style.display = 'none';
                }
            }
            
            function displayResults(data) {
                const results = document.getElementById('results');
                
                if (!data.success) {
                    results.innerHTML = '<div class="result-item">–û—à–∏–±–∫–∞: ' + (data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') + '</div>';
                    return;
                }
                
                let html = '<h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</h3>';
                html += '<p><strong>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</strong> ' + data.summary + '</p>';
                html += '<p><strong>–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:</strong> ' + data.total_results + '</p>';
                
                if (data.results && data.results.length > 0) {
                    html += '<div class="stats"><div class="stat-card"><div class="stat-number">' + data.total_results + '</div><div>–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</div></div></div>';
                    
                    data.results.forEach(result => {
                        html += '<div class="result-item">';
                        html += '<div class="employee-name">' + (result.employee_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') + '</div>';
                        html += '<div class="result-type">' + (result.type || '–û–±—â–∏–π') + ' ‚Ä¢ ' + (result.date || '–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞') + '</div>';
                        html += '<div class="result-content">' + (result.content || result.context || '–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ') + '</div>';
                        if (result.confidence) html += '<div><small>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ' + result.confidence + '</small></div>';
                        html += '</div>';
                    });
                } else {
                    html += '<p>–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</p>';
                }
                
                results.innerHTML = html;
            }
            
            async function runAnalysis(forceReanalyze = false) {
                const analysisResults = document.getElementById('analysisResults');
                const buttonText = forceReanalyze ? 'üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∞–Ω–∞–ª–∏–∑...' : 'üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã...';
                analysisResults.innerHTML = '<p>' + buttonText + '</p>';
                
                try {
                    const response = await fetch('/api/analyze', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ force_reanalyze: forceReanalyze })
                    });
                    
                    const data = await response.json();
                    
                    let html = '<h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞</h3>';
                    
                    if (data.statistics?.processed === 0 && !forceReanalyze) {
                        html += '<div class="result-item" style="border-left-color: #FFA500;">';
                        html += '<div class="employee-name">‚ÑπÔ∏è –ù–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã</div>';
                        html += '<div class="result-content">–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∞–Ω–∞–ª–∏–∑" –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.</div>';
                        html += '</div>';
                    }
                    
                    html += '<div class="stats">';
                    html += '<div class="stat-card"><div class="stat-number">' + (data.statistics?.total_files || 0) + '</div><div>–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤</div></div>';
                    html += '<div class="stat-card"><div class="stat-number">' + (data.statistics?.processed || 0) + '</div><div>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ</div></div>';
                    html += '<div class="stat-card"><div class="stat-number">' + (data.statistics?.skipped || 0) + '</div><div>–ü—Ä–æ–ø—É—â–µ–Ω–æ</div></div>';
                    html += '<div class="stat-card"><div class="stat-number">' + (data.statistics?.meetings_detected || 0) + '</div><div>–í—Å—Ç—Ä–µ—á —Å–æ—Å—Ç–æ—è–ª–æ—Å—å</div></div>';
                    html += '<div class="stat-card"><div class="stat-number">' + (data.statistics?.meetings_missed || 0) + '</div><div>–í—Å—Ç—Ä–µ—á –ø—Ä–æ–ø—É—â–µ–Ω–æ</div></div>';
                    html += '<div class="stat-card"><div class="stat-number">' + (data.hr_attention_required?.length || 0) + '</div><div>–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è HR</div></div>';
                    html += '</div>';
                    
                    if (data.hr_attention_required && data.hr_attention_required.length > 0) {
                        html += '<h4>–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è HR:</h4>';
                        data.hr_attention_required.forEach(item => {
                            html += '<div class="result-item">';
                            html += '<div class="employee-name">' + (item.employee || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') + '</div>';
                            html += '<div class="result-content">' + (item.reason || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞') + '</div>';
                            html += '</div>';
                        });
                    }
                    
                    analysisResults.innerHTML = html;
                } catch (error) {
                    analysisResults.innerHTML = '<div class="result-item">–û—à–∏–±–∫–∞: ' + error.message + '</div>';
                }
            }
            
            async function getSystemStatus() {
                const analysisResults = document.getElementById('analysisResults');
                
                try {
                    const response = await fetch('/api/status');
                    const data = await response.json();
                    
                    let html = '<h3>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h3>';
                    html += '<div class="stats">';
                    html += '<div class="stat-card"><div class="stat-number">' + (data.total_documents || 0) + '</div><div>–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ</div></div>';
                    html += '<div class="stat-card"><div class="stat-number">' + (data.analyzed_documents || 0) + '</div><div>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ</div></div>';
                    html += '<div class="stat-card"><div class="stat-number">' + (data.ai_enabled ? '‚úÖ' : '‚ùå') + '</div><div>AI –∞–Ω–∞–ª–∏–∑</div></div>';
                    html += '<div class="stat-card"><div class="stat-number">' + (data.notifications_enabled ? '‚úÖ' : '‚ùå') + '</div><div>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</div></div>';
                    html += '</div>';
                    
                    analysisResults.innerHTML = html;
                } catch (error) {
                    analysisResults.innerHTML = '<div class="result-item">–û—à–∏–±–∫–∞: ' + error.message + '</div>';
                }
            }
            
            async function testNotifications() {
                try {
                    const response = await fetch('/api/test-notifications', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ message: '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç HR AI —Å–∏—Å—Ç–µ–º—ã' })
                    });
                    
                    const data = await response.json();
                    alert('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ' + JSON.stringify(data));
                } catch (error) {
                    alert('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ' + error.message);
                }
            }
            
            function setQuery(query) {
                document.getElementById('queryInput').value = query;
            }
            
            function clearResults() {
                document.getElementById('results').innerHTML = '';
                document.getElementById('analysisResults').innerHTML = '';
                document.getElementById('queryInput').value = '';
            }
            
            // Allow Enter key to submit query
            document.getElementById('queryInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter' && e.ctrlKey) {
                    submitQuery();
                }
            });
            
            // Google Drive functions
            async function getStorageStatus() {
                const storageResults = document.getElementById('storageResults');
                storageResults.innerHTML = '<p>üîÑ –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...</p>';
                
                try {
                    const response = await fetch('/api/storage-status');
                    const data = await response.json();
                    
                    let html = '<h3>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è</h3>';
                    html += '<div class="stats">';
                    html += '<div class="stat-card"><div class="stat-number">' + data.storage_backend.toUpperCase() + '</div><div>–¢–µ–∫—É—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ</div></div>';
                    html += '<div class="stat-card"><div class="stat-number">' + (data.google_drive_enabled ? '‚úÖ' : '‚ùå') + '</div><div>Google Drive –≤–∫–ª—é—á–µ–Ω</div></div>';
                    html += '<div class="stat-card"><div class="stat-number">' + (data.google_drive_connected ? '‚úÖ' : '‚ùå') + '</div><div>Google Drive –ø–æ–¥–∫–ª—é—á–µ–Ω</div></div>';
                    html += '</div>';
                    
                    if (data.last_sync) {
                        html += '<p><strong>–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</strong> ' + new Date(data.last_sync).toLocaleString() + '</p>';
                    }
                    
                    html += '<p><strong>–õ–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞:</strong> ' + data.local_directory + '</p>';
                    
                    storageResults.innerHTML = html;
                } catch (error) {
                    storageResults.innerHTML = '<div class="result-item">–û—à–∏–±–∫–∞: ' + error.message + '</div>';
                }
            }
            
            async function syncGoogleDrive(force = false) {
                const storageResults = document.getElementById('storageResults');
                const buttonText = force ? 'üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...' : 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º Google Drive...';
                storageResults.innerHTML = '<p>' + buttonText + '</p>';
                
                try {
                    const response = await fetch('/api/sync-google-drive', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ force: force })
                    });
                    
                    const data = await response.json();
                    
                    let html = '<h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</h3>';
                    
                    if (data.success && data.statistics) {
                        html += '<div class="stats">';
                        html += '<div class="stat-card"><div class="stat-number">' + (data.statistics.total_files || 0) + '</div><div>–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤</div></div>';
                        html += '<div class="stat-card"><div class="stat-number">' + (data.statistics.downloaded || 0) + '</div><div>–ó–∞–≥—Ä—É–∂–µ–Ω–æ</div></div>';
                        html += '<div class="stat-card"><div class="stat-number">' + (data.statistics.skipped || 0) + '</div><div>–ü—Ä–æ–ø—É—â–µ–Ω–æ</div></div>';
                        html += '<div class="stat-card"><div class="stat-number">' + (data.statistics.errors || 0) + '</div><div>–û—à–∏–±–æ–∫</div></div>';
                        html += '</div>';
                        html += '<p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> ' + data.message + '</p>';
                    } else {
                        html += '<p>' + data.message + '</p>';
                    }
                    
                    storageResults.innerHTML = html;
                } catch (error) {
                    storageResults.innerHTML = '<div class="result-item">–û—à–∏–±–∫–∞: ' + error.message + '</div>';
                }
            }
            
            async function refreshStorageConnection() {
                const storageResults = document.getElementById('storageResults');
                storageResults.innerHTML = '<p>üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...</p>';
                
                try {
                    const response = await fetch('/api/refresh-storage', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    
                    const data = await response.json();
                    
                    let html = '<h3>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</h3>';
                    html += '<p>' + data.message + '</p>';
                    
                    if (data.success) {
                        html += '<p style="color: green;">‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ</p>';
                    } else {
                        html += '<p style="color: red;">‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</p>';
                    }
                    
                    storageResults.innerHTML = html;
                } catch (error) {
                    storageResults.innerHTML = '<div class="result-item">–û—à–∏–±–∫–∞: ' + error.message + '</div>';
                }
            }
        </script>
    </body>
    </html>
    """

@app.post("/api/query", response_model=QueryResponse)
async def process_query(request: QueryRequest):
    """Process a natural language query."""
    try:
        result = await query_processor.process_query(request.query)
        return QueryResponse(**result)
    except Exception as e:
        logger.error(f"Query processing error: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/analyze", response_model=AnalysisResponse)
async def run_analysis(request: AnalysisRequest, background_tasks: BackgroundTasks):
    """Run document analysis."""
    try:
        if request.days_back:
            result = hr_analyzer.analyze_recent_documents(request.days_back)
        else:
            result = hr_analyzer.analyze_all_documents(request.force_reanalyze)
        
        return AnalysisResponse(
            success=True,
            message="Analysis completed successfully",
            statistics=result,
            hr_attention_required=result.get('hr_attention_required', [])
        )
    except Exception as e:
        logger.error(f"Analysis error: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/status")
async def get_system_status():
    """Get system status and statistics."""
    try:
        # Get document statistics
        from sqlalchemy import func
        from ..models.database import Document, MeetingAnalysis
        
        session = hr_analyzer.session
        
        total_docs = session.query(func.count(Document.id)).scalar() or 0
        analyzed_docs = session.query(func.count(MeetingAnalysis.id)).scalar() or 0
        
        # Test connections
        notification_status = notifier.test_connections()
        
        return {
            "status": "running",
            "total_documents": total_docs,
            "analyzed_documents": analyzed_docs,
            "ai_enabled": bool(settings.openai_api_key),
            "notifications_enabled": any(notification_status.values()),
            "notification_status": notification_status,
            "last_updated": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"Status check error: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/test-notifications")
async def test_notifications(request: NotificationTest):
    """Test notification systems."""
    try:
        results = notifier.test_connections()
        
        # Send actual test message if connections work
        if any(results.values()):
            await notifier.send_instant_alert(
                employee_name="–¢–µ—Å—Ç–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫",
                alert_type="system_test",
                message=request.message,
                priority=request.priority
            )
        
        return {
            "success": True,
            "connection_tests": results,
            "message": "Test notifications sent where possible"
        }
    except Exception as e:
        logger.error(f"Notification test error: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/popular-queries")
async def get_popular_queries(days: int = 30):
    """Get popular queries from recent history."""
    try:
        popular = query_processor.get_popular_queries(days)
        return {"popular_queries": popular}
    except Exception as e:
        logger.error(f"Popular queries error: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@app.on_event("startup")
async def startup_event():
    """Initialize services on startup."""
    logger.info("Starting HR AI system...")
    
    # Start the scheduler
    try:
        scheduler.start()
        logger.info("Weekly scheduler started")
    except Exception as e:
        logger.error(f"Failed to start scheduler: {str(e)}")

@app.on_event("shutdown")
async def shutdown_event():
    """Cleanup on shutdown."""
    logger.info("Shutting down HR AI system...")
    
    try:
        scheduler.stop()
        query_processor.close()
        hr_analyzer.close()
        scheduler.close()
    except Exception as e:
        logger.error(f"Error during shutdown: {str(e)}")

# Health check endpoint
@app.get("/health")
async def health_check():
    """Health check endpoint."""
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

# Google Drive integration endpoints
@app.get("/api/storage-status")
async def get_storage_status():
    """Get current storage backend status."""
    try:
        status = hr_analyzer.get_storage_status()
        return status
    except Exception as e:
        logger.error(f"Storage status error: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/sync-google-drive")
async def sync_google_drive(force: bool = False):
    """Sync Google Drive files."""
    try:
        sync_result = hr_analyzer.sync_google_drive(force=force)
        if sync_result:
            return {
                "success": True,
                "message": "Google Drive sync completed",
                "statistics": sync_result
            }
        else:
            return {
                "success": False,
                "message": "Google Drive not available or sync not needed"
            }
    except Exception as e:
        logger.error(f"Google Drive sync error: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/refresh-storage")
async def refresh_storage_connection():
    """Refresh storage connection."""
    try:
        success = hr_analyzer.force_refresh_storage_connection()
        return {
            "success": success,
            "message": "Storage connection refreshed" if success else "Failed to refresh storage connection"
        }
    except Exception as e:
        logger.error(f"Storage refresh error: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

# Main function for running the server
def main():
    """Run the FastAPI server."""
    uvicorn.run(
        "hr_ai.api.web_app:app",
        host=settings.host,
        port=settings.port,
        reload=settings.debug,
        log_level="info"
    )

if __name__ == "__main__":
    main()